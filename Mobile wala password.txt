#include<simplecpp>

bool is_inside(int x,int y,int c_x,int c_y,int rad)
{
    double dist_cent=sqrt(((x-c_x)*(x-c_x))+((y-c_y)*(y-c_y)));
    if(dist_cent<=rad)
        return true;
    else
        return false;
}

bool is_inside_circle(int x,int y,int circle_no)
{
    if(circle_no==1 && is_inside(x,y,300,300,30))
    {
        return true;
    }
    else if(circle_no==2 && is_inside(x,y,200,300,30))
    {
        return true;
    }
    else if(circle_no==3 && is_inside(x,y,400,300,30))
    {
        return true;
    }
    else if(circle_no==4 && is_inside(x,y,300,200,30))
    {
        return true;
    }
    else if(circle_no==5 && is_inside(x,y,300,400,30))
    {
        return true;
    }
    else if(circle_no==6 && is_inside(x,y,200,200,30))
    {
        return true;
    }
    else if(circle_no==7 && is_inside(x,y,200,400,30))
    {
        return true;
    }
    else if(circle_no==8 && is_inside(x,y,400,400,30))
    {
        return true;
    }
    else if(circle_no==9 && is_inside(x,y,400,200,30))
    {
        return true;
    }
    else
    {
        return false;
    }
}

void show_circle(int x,int y)
{
  //  Circle a1(300,300,30),,,,,,,,
    //a1.hide();a2.hide();a3.hide();a4.hide();a5.hide();a6.hide();a7.hide();a8.hide();a9.hide();
    if(is_inside_circle(x,y,1))
    {
        Circle a1(300,300,30);
        a1.imprint();
    }
    if(is_inside_circle(x,y,2))
    {
        Circle a2(200,300,30);
        a2.imprint();
    }
    if(is_inside_circle(x,y,3))
    {
        Circle a3(400,300,30);
        a3.imprint();
    }
    if(is_inside_circle(x,y,4))
    {
        Circle a4(300,200,30);
        a4.imprint();
    }
    if(is_inside_circle(x,y,5))
    {
        Circle a5(300,400,30);
        a5.imprint();
    }
    if(is_inside_circle(x,y,6))
    {
        Circle a6(200,200,30);
        a6.imprint();
    }
    if(is_inside_circle(x,y,7))
    {
        Circle a7(200,400,30);
        a7.imprint();
    }
    if(is_inside_circle(x,y,8))
    {
        Circle a8(400,400,30);
        a8.imprint();
    }
    if(is_inside_circle(x,y,9))
    {
        Circle a9(400,200,30);
        a9.imprint();
    }
}

main_program
{
    initCanvas("Draw on the canvas",600,600);
    beginFrame();
    Circle c1(300,300,5),c2(200,300,5),c3(400,300,5),c4(300,200,5),c5(300,400,5),c6(200,200,5),c7(200,400,5),c8(400,400,5),c9(400,200,5);

    c1.imprint();
    c2.imprint();
    c3.imprint();
    c4.imprint();
    c5.imprint();
    c6.imprint();
    c7.imprint();
    c8.imprint();
    c9.imprint();
    c1.setFill(true);
    c2.setFill(true);
    c3.setFill(true);
    c4.setFill(true);
    c5.setFill(true);
    c6.setFill(true);
    c7.setFill(true);
    c8.setFill(true);
    c9.setFill(true);
    Text t(300,20,"Press escape to exit");
    endFrame();
    const char escape='\33';

//    ifstream infile("Data.txt",ios::in);
//    int check_x,check_y;

    XEvent draw;
    int lastx,lasty;
    while(1)
    {
        nextEvent(draw);
        if(mouseButtonPressEvent(draw))
        {
            lastx=draw.xbutton.x;
            lasty=draw.xbutton.y;
        }
        if(mouseDragEvent(draw))
        {
            imprintLine(lastx,lasty,draw.xmotion.x,draw.xmotion.y);
            lastx=draw.xmotion.x;
            lasty=draw.xmotion.y;
            show_circle(lastx,lasty);

        }
        if(keyPressEvent(draw))
        {
            if(charFromEvent(draw)==escape)
                break;
        }
    }
}
